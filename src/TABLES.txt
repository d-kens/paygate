
// Store each customer payments initiated by a merchant
CREATE TABLE payments (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    merchant_id BIGINT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    currency VARCHAR(10) DEFAULT 'KES',
    status VARCHAR(50) NOT NULL DEFAULT 'PENDING', -- PENDING, SUCCESS, FAILED
    transaction_reference VARCHAR(100) NOT NULL UNIQUE, -- internal ref
    mpesa_transaction_id VARCHAR(100) UNIQUE, -- Mpesa receipt number (once callback is received)
    customer_phone VARCHAR(20) NOT NULL,
    description VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT fk_payment_merchant FOREIGN KEY (merchant_id) REFERENCES merchants(id)
);

// Logs Mpesa API callbacks for audit and troubleshooting

CREATE TABLE payment_callbacks (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    payment_id BIGINT NOT NULL,
    raw_payload JSON NOT NULL, -- store entire Mpesa callback
    status VARCHAR(50), -- SUCCESS, FAILED
    received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_callback_payment FOREIGN KEY (payment_id) REFERENCES payments(id)
);


CREATE TABLE settlements ( // Keeps track of money owed/paid to merchants after Mpesa clears funds.
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    merchant_id BIGINT NOT NULL,
    total_amount DECIMAL(10,2) NOT NULL,
    settlement_date DATE NOT NULL,
    status VARCHAR(50) DEFAULT 'PENDING', -- PENDING, COMPLETED
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_settlement_merchant FOREIGN KEY (merchant_id) REFERENCES merchants(id)
);


CREATE TABLE merchant_balances ( // Reflects the wallet-like balance of each merchant, updated after successful payments & settlements.
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    merchant_id BIGINT NOT NULL,
    available_balance DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    pending_balance DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT fk_balance_merchant FOREIGN KEY (merchant_id) REFERENCES merchants(id)
);
